@page "/ruta/{Id:int}"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@implements IAsyncDisposable

<PageTitle>Autobuses - Ruta @Id</PageTitle>

<h1>Mapa de Autobuses - Ruta @Id</h1>

<div class="row mb-3">
    <div class="col">
        <div class="btn-group" role="group">
            <button class="btn btn-success" @onclick="IniciarSimulacion">
                <i class="fa fa-play"></i> Iniciar
            </button>
            <button class="btn btn-warning" @onclick="PausarSimulacion">
                <i class="fa fa-pause"></i> Pausar
            </button>
            <button class="btn btn-danger" @onclick="ReiniciarSimulacion">
                <i class="fa fa-refresh"></i> Reiniciar
            </button>
            <a href="/rutas" class="btn btn-secondary">
                <i class="fa fa-arrow-left"></i> Volver
            </a>
        </div>
    </div>
</div>

@if (error)
{
    <div class="alert alert-danger mt-3">
        <strong>Error:</strong> @errorMessage
    </div>
}

<div id="map" style="height: 500px; width: 100%;"></div>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool rutaHabilitada = false;
    private bool mapInitialized = false;
    private bool error = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("LocalAPI");
            var response = await client.GetAsync($"api/Rutas/{Id}");

            if (!response.IsSuccessStatusCode)
            {
                error = true;
                errorMessage = $"La ruta {Id} no está disponible o ha sido deshabilitada. (Código: {response.StatusCode})";
                Console.WriteLine($"Error al cargar la ruta {Id}: {response.StatusCode}");
            }
            else
            {
                rutaHabilitada = true;
            }
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error al cargar la ruta: {ex.Message}";
            Console.WriteLine($"Excepción al cargar la ruta {Id}: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && rutaHabilitada && !mapInitialized)
        {
            try
            {
                // Dar más tiempo para que el DOM se cargue completamente
                await Task.Delay(300);

                // Añadir logs para ayudar con la depuración
                await JSRuntime.InvokeVoidAsync("console.log", $"Verificando elementos del DOM y scripts para ruta {Id}");

                // Asegurarnos que el elemento del mapa existe
                var mapElementExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('map') !== null");
                if (!mapElementExists)
                {
                    error = true;
                    errorMessage = "No se encontró el elemento 'map' en la página.";
                    StateHasChanged();
                    return;
                }

                // Verificar si Leaflet está cargado
                var leafletExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof L !== 'undefined'");
                if (!leafletExists)
                {
                    error = true;
                    errorMessage = "La biblioteca Leaflet no está cargada correctamente.";
                    StateHasChanged();
                    return;
                }

                // Verificar si el objeto rutaSignalR existe
                var signalRExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.rutaSignalR !== 'undefined'");
                if (!signalRExists)
                {
                    error = true;
                    errorMessage = "El módulo rutaSignalR no está correctamente cargado.";
                    StateHasChanged();
                    return;
                }

                // Verificar SignalR
                var signalRHubExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof signalR !== 'undefined'");
                if (!signalRHubExists)
                {
                    error = true;
                    errorMessage = "La biblioteca SignalR no está cargada correctamente.";
                    StateHasChanged();
                    return;
                }

                // Inicializar el mapa con mejor manejo de errores
                await JSRuntime.InvokeVoidAsync("console.log", "Inicializando mapa para ruta " + Id);
                await JSRuntime.InvokeVoidAsync("rutaSignalR.initializeMap");

                // Esperar un poco para asegurarnos que el mapa se inicializa
                await Task.Delay(200);

                // Configurar la ruta específica a mostrar
                await JSRuntime.InvokeVoidAsync("rutaSignalR.setRutaId", Id);

                // Inicializar la conexión y cargar datos
                await JSRuntime.InvokeVoidAsync("rutaSignalR.init");

                mapInitialized = true;
            }
            catch (Exception ex)
            {
                error = true;
                errorMessage = $"Error al inicializar el mapa: {ex.Message}";
                Console.WriteLine($"Error inicializando mapa para ruta {Id}: {ex.Message}");
                StateHasChanged();
            }
        }
    }


    private async Task IniciarSimulacion()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("rutaSignalR.iniciarSimulacion");
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error al iniciar simulación: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task PausarSimulacion()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("rutaSignalR.pausarSimulacion");
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error al pausar simulación: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ReiniciarSimulacion()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("rutaSignalR.reiniciarSimulacion");
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Error al reiniciar simulación: {ex.Message}";
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        // Si es necesario, limpiar recursos del mapa al salir de la página
        if (mapInitialized)
        {
            try
            {
                return JSRuntime.InvokeVoidAsync("eval", "if(window.rutaSignalR && window.rutaSignalR.connection) { window.rutaSignalR.connection.stop(); }");
            }
            catch
            {
                // Ignorar errores durante la limpieza
            }
        }
        return ValueTask.CompletedTask;
    }
}

@* Scripts - cargar solo una vez *@
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<link rel="stylesheet" href="css/map-styles.css" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/leaflet.marker.slideto@0.2.0/Leaflet.Marker.SlideTo.min.js"></script>
<script src="js/signalr-ruta.js"></script>

<style>
    .bus-marker {
        background-color: #3388ff;
        color: white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        border: 2px solid white;
        box-shadow: 0 0 5px rgba(0,0,0,0.5);
    }

    .simulation-controls {
        background-color: white;
        padding: 5px;
        border-radius: 4px;
        box-shadow: 0 1px 5px rgba(0,0,0,0.4);
    }

    .control-btn {
        width: 30px;
        height: 30px;
        border: none;
        background-color: white;
        cursor: pointer;
        border-radius: 2px;
    }

        .control-btn:hover {
            background-color: #f4f4f4;
        }

    .info-error {
        background-color: white;
        padding: 10px;
        border-radius: 4px;
        box-shadow: 0 1px 5px rgba(0,0,0,0.4);
        max-width: 300px;
    }
</style>
