@page "/rutas"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Collections
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@implements IAsyncDisposable

<PageTitle>Rutas disponibles</PageTitle>

<div class="container">
    <h1>Rutas disponibles</h1>
    <p class="lead">Consulta todas las rutas disponibles en nuestro sistema.</p>

    @if (loading)
    {
        <div class="d-flex justify-content-center my-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visualmente-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (error)
    {
        <div class="alert alert-danger" role="alert">
            Ha ocurrido un error al cargar las rutas: @errorMessage
        </div>
    }
    else if (rutas == null || !rutas.Any())
    {
        <div class="alert alert-info" role="alert">
            No hay rutas disponibles en este momento.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Descripcion</th>
                        <th>Tiempo estimado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ruta in rutas)
                    {
                        <tr>
                            <td>@ruta.Id</td>
                            <td>@ruta.Descripcion</td>
                            <td>@ruta.TiempoEstimado</td>
                            <td>
                                <a href="/ruta/@ruta.Id" class="btn btn-primary btn-sm">
                                    <i class="fa fa-map-marker"></i> Ver en mapa
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@using LiveBus.Modelos
@using System.Collections.Concurrent
@code {
    private List<Ruta> rutas = new();
    private bool loading = true;
    private bool error = false;
    private string errorMessage = string.Empty;
    private HubConnection? hubConnection;
    private ConcurrentDictionary<int, int> ultimosPuntosAutobuses = new();
    private ConcurrentDictionary<int, Dictionary<string, object>> infoRutas = new();
    private bool primeraRenderizacion = true;
    private Timer? actualizacionTimer;
    List<Ruta> nuevasRutas;

    private HttpClient GetHttpClient()
    {
        return HttpClientFactory.CreateClient("LocalAPI");
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarRutas();
        foreach (var ruta in rutas)
        {
            ruta.TiempoEstimadoPersonalizado = "Cargando...";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConfigurarSignalR();
            primeraRenderizacion = false;

            var interval = TimeSpan.FromSeconds(4.5);

            actualizacionTimer = new Timer(async _ =>
            {
                await CargarRutas();
                await InvokeAsync(StateHasChanged);
            }, null, interval, interval);
        }
    }

    private async Task ConfigurarSignalR()
    {
        try
        {
            Console.WriteLine("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
            await LogToConsoleAsync("Configurando SignalR...");

            var currentHost = new Uri(NavigationManager.Uri).Host.ToLower();
            var isRemote = !currentHost.Contains("localhost");

            HttpMessageHandler httpMessageHandler;
            if (isRemote)
            {
                httpMessageHandler = new HttpClientHandler
                    {
                        ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true,
                        SslProtocols = System.Security.Authentication.SslProtocols.Tls12 | System.Security.Authentication.SslProtocols.Tls13
                    };
            }
            else
            {
                httpMessageHandler = new HttpClientHandler();
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/autobusMoveHub"), options =>
                {
                    options.HttpMessageHandlerFactory = _ => httpMessageHandler;
                    options.SkipNegotiation = false;
                    options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets |
                                         Microsoft.AspNetCore.Http.Connections.HttpTransportType.LongPolling;
                })
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .Build();

            hubConnection.ServerTimeout = TimeSpan.FromMinutes(2);
            hubConnection.HandshakeTimeout = TimeSpan.FromSeconds(30);

            hubConnection.Closed += async (error) =>
            {
                await LogToConsoleAsync($"Conexion SignalR cerrada: {error?.Message}", error != null);
                await Task.Delay(1000);
                await hubConnection.StartAsync();
            };

            hubConnection.On<int, double, double>("RecibirActualizacionPosicion", OnRecibirActualizacionPosicion);
            hubConnection.On("SimulacionIniciada", OnSimulacionCambioEstado);
            hubConnection.On("SimulacionPausada", OnSimulacionCambioEstado);
            hubConnection.On("SimulacionReiniciada", OnSimulacionCambioEstado);
            hubConnection.On<int, int>("RecibirCambioRuta", OnRecibirCambioRuta);

            await LogToConsoleAsync("Iniciando conexion SignalR...");
            await hubConnection.StartAsync();
            await LogToConsoleAsync("Conexion SignalR establecida");
            await LogToConsoleAsync($"Estado de la conexion: {hubConnection.State}");
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                Console.WriteLine("INNER EXCEPTION: " + ex.InnerException.Message);
            }

            await LogToConsoleAsync($"Error al configurar SignalR: {ex.Message}", true);
            await Task.Delay(2000);
            await ConfigurarSignalR();
        }
    }


    private async Task OnSimulacionCambioEstado()
    {
        await CargarRutas();

    }

    private async Task OnRecibirCambioRuta(int autobusId, int rutaId)
    {
        await LogToConsoleAsync($"Autobus {autobusId} cambio a ruta {rutaId}");
        await CargarRutas();
    }

    private async void OnRecibirActualizacionPosicion(int autobusId, double latitud, double longitud)
    {
        try
        {
            await LogToConsoleAsync($"SignalR: Recibida actualización del autobus {autobusId} en [{latitud}, {longitud}]");

            var rutaId = await ObtenerYMostrarInfoAutobus(autobusId);
            if (rutaId.HasValue)
            {
                await LogToConsoleAsync($"Actualizando información de la ruta {rutaId}");
            }

            await CargarRutas();
            await InvokeAsync(StateHasChanged);
            await LogToConsoleAsync("UI actualizada");
        }
        catch (Exception ex)
        {
            await LogToConsoleAsync($"Error en actualización: {ex.Message}", true);
        }
    }

    private async Task LogToConsoleAsync(string message, bool isError = false)
    {
        try
        {
            if (!primeraRenderizacion)
            {
                if (isError)
                    await JSRuntime.InvokeVoidAsync("console.error", message);
                else
                    await JSRuntime.InvokeVoidAsync("console.log", message);
            }
        }
        catch
        {
            // Ignorar errores de la consola
        }
    }

    private async Task<int?> ObtenerYMostrarInfoAutobus(int autobusId)
    {
        try
        {
            var client = GetHttpClient();
            var response = await client.GetAsync($"api/Autobuses/{autobusId}");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var jsonDoc = JsonDocument.Parse(content);
                var root = jsonDoc.RootElement;

                if (root.TryGetProperty("puntoActual", out var puntoActualProp) ||
                    root.TryGetProperty("PuntoActual", out puntoActualProp))
                {
                    int puntoActual = puntoActualProp.GetInt32();
                    int? rutaId = null;

                    if (root.TryGetProperty("rutaId", out var rutaIdProp) ||
                        root.TryGetProperty("RutaId", out rutaIdProp))
                    {
                        if (rutaIdProp.ValueKind != JsonValueKind.Null)
                        {
                            rutaId = rutaIdProp.GetInt32();
                        }
                    }

                    if (ultimosPuntosAutobuses.TryGetValue(autobusId, out int ultimoPunto))
                    {
                        if (puntoActual != ultimoPunto)
                        {
                            ultimosPuntosAutobuses[autobusId] = puntoActual;

                            if (rutaId.HasValue)
                            {
                                await ActualizarInfoRuta(rutaId.Value, autobusId, puntoActual);
                            }
                            await InvokeAsync(StateHasChanged);
                        }
                    }
                    else
                    {
                        ultimosPuntosAutobuses[autobusId] = puntoActual;

                        if (rutaId.HasValue)
                        {
                            await ActualizarInfoRuta(rutaId.Value, autobusId, puntoActual);
                        }
                        await InvokeAsync(StateHasChanged);
                    }

                    return rutaId;
                }
            }
        }
        catch (Exception ex)
        {
            await LogToConsoleAsync($"Error: {ex.Message}", true);
        }

        return null;
    }

    private async Task ActualizarInfoRuta(int rutaId, int autobusId, int puntoActual)
    {
        try
        {
            if (!infoRutas.TryGetValue(rutaId, out var infoRuta))
            {
                infoRuta = new Dictionary<string, object>();
                infoRutas[rutaId] = infoRuta;
            }

            if (!infoRuta.ContainsKey("totalPuntos"))
            {
                var rutaEncontrada = rutas.FirstOrDefault(r => r.Id == rutaId);
                if (rutaEncontrada != null)
                {
                    infoRuta["totalPuntos"] = rutaEncontrada.PuntosRutaCount;
                }
                else
                {
                    var client = GetHttpClient();
                    var response = await client.GetAsync($"api/Rutas/{rutaId}");

                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        var jsonDoc = JsonDocument.Parse(content);
                        var root = jsonDoc.RootElement;

                        if (root.TryGetProperty("puntosRuta", out var puntosRutaProp) ||
                            root.TryGetProperty("PuntosRuta", out puntosRutaProp))
                        {
                            int contadorPuntos = 0;

                            if (puntosRutaProp.ValueKind == JsonValueKind.Array)
                            {
                                contadorPuntos = puntosRutaProp.GetArrayLength();
                            }
                            else if (puntosRutaProp.TryGetProperty("$values", out var valuesElement) &&
                                     valuesElement.ValueKind == JsonValueKind.Array)
                            {
                                contadorPuntos = valuesElement.GetArrayLength();
                            }

                            infoRuta["totalPuntos"] = contadorPuntos;
                        }
                    }
                }
            }

            if (infoRuta.TryGetValue("totalPuntos", out var totalPuntosObj) && totalPuntosObj is int totalPuntos)
            {
                int puntosRestantes = totalPuntos - puntoActual;
                if (puntosRestantes < 0) puntosRestantes = 0;

                int segundosRestantes = (int)(puntosRestantes * 4.5);
                string tiempoEstimado = FormatTime(segundosRestantes);

                infoRuta["puntosRestantes"] = puntosRestantes;
                infoRuta["segundosRestantes"] = segundosRestantes;
                infoRuta["tiempoEstimado"] = tiempoEstimado;

                var rutaExistente = rutas.FirstOrDefault(r => r.Id == rutaId);
                if (rutaExistente != null)
                {
                    rutaExistente.TiempoEstimadoPersonalizado = tiempoEstimado;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            await LogToConsoleAsync($"Error: {ex.Message}", true);
        }
    }

    private string FormatTime(int seconds)
    {
        TimeSpan ts = TimeSpan.FromSeconds(seconds);
        if (ts.TotalHours >= 1)
            return $"{(int)ts.TotalHours}h {ts.Minutes}m";
        else if (ts.TotalMinutes >= 1)
            return $"{ts.Minutes}m {ts.Seconds}s";
        else
            return $"{ts.Seconds}s";
    }

    private async Task CargarRutas()
    {
        try
        {
            bool initialLoad = loading;
            var client = GetHttpClient();
            var response = await client.GetAsync("api/Rutas");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

                
                try
                {
                    nuevasRutas = JsonSerializer.Deserialize<List<Ruta>>(content, options) ?? new();
                }
                catch
                {
                    var jsonDoc = JsonSerializer.Deserialize<JsonDocument>(content);
                    if (jsonDoc != null && jsonDoc.RootElement.TryGetProperty("$values", out var valuesElement))
                    {
                        nuevasRutas = JsonSerializer.Deserialize<List<Ruta>>(valuesElement.GetRawText(), options) ?? new();
                    }
                    else
                    {
                        nuevasRutas = new List<Ruta>();
                    }
                }

                foreach (var ruta in nuevasRutas)
                {
                    var rutaExistente = rutas.FirstOrDefault(r => r.Id == ruta.Id);
                    if (rutaExistente != null && !string.IsNullOrEmpty(rutaExistente.TiempoEstimadoPersonalizado))
                    {
                        ruta.TiempoEstimadoPersonalizado = rutaExistente.TiempoEstimadoPersonalizado;
                    }

                    if (ruta.Autobuses != null)
                    {
                        List<(int autobusId, int puntoActual)> autobusesInfo = new();
                        ProcesarAutobuses(ruta, autobusesInfo);

                        if (autobusesInfo.Count > 0)
                        {
                            ActualizarTiempoEstimado(ruta, autobusesInfo);
                        }
                    }
                   
                }

                rutas = nuevasRutas;
            }
            else if (initialLoad)
            {
                error = true;
                errorMessage = $"Error en la API: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            if (loading)
            {
                error = true;
                errorMessage = ex.Message;
            }
        }
        finally
        {
            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ProcesarAutobuses(Ruta ruta, List<(int autobusId, int puntoActual)> autobusesInfo)
    {
        if (ruta.Autobuses is IList autobusesLista)
        {
            foreach (var item in autobusesLista)
            {
                ProcesarItemAutobus(item, autobusesInfo);
            }
        }
        else if (ruta.Autobuses is JsonElement jeAutobuses && jeAutobuses.ValueKind == JsonValueKind.Array)
        {
            foreach (var je in jeAutobuses.EnumerateArray())
            {
                if (je.TryGetProperty("id", out var idProp) && idProp.TryGetInt32(out int id) &&
                    je.TryGetProperty("puntoActual", out var paProp) && paProp.TryGetInt32(out int pa))
                {
                    autobusesInfo.Add((id, pa));
                    ultimosPuntosAutobuses[id] = pa;
                }
            }
        }
    }

    private void ProcesarItemAutobus(object item, List<(int autobusId, int puntoActual)> autobusesInfo)
    {
        if (item is JsonElement je && je.ValueKind == JsonValueKind.Object)
        {
            int? id = null;
            int? punto = null;

            if (je.TryGetProperty("id", out var idProp) && idProp.TryGetInt32(out int idVal))
                id = idVal;

            if (je.TryGetProperty("puntoActual", out var paProp) && paProp.TryGetInt32(out int paVal))
                punto = paVal;

            if (id.HasValue && punto.HasValue)
            {
                autobusesInfo.Add((id.Value, punto.Value));
                ultimosPuntosAutobuses[id.Value] = punto.Value;
            }
        }
    }

    private void ActualizarTiempoEstimado(Ruta ruta, List<(int autobusId, int puntoActual)> autobusesInfo)
    {
        var mejorAutobus = autobusesInfo.OrderByDescending(a => a.puntoActual).First();

        if (!infoRutas.TryGetValue(ruta.Id, out var infoRuta))
        {
            infoRuta = new Dictionary<string, object>();
            infoRutas[ruta.Id] = infoRuta;
        }

        infoRuta["totalPuntos"] = ruta.PuntosRutaCount;
        infoRuta["mejorPuntoActual"] = mejorAutobus.puntoActual;

        int puntosRestantes = ruta.PuntosRutaCount - mejorAutobus.puntoActual;
        if (puntosRestantes < 0) puntosRestantes = 0;

        int segundosRestantes = (int)(puntosRestantes * 4.5);
        string tiempoEstimado = FormatTime(segundosRestantes);

        infoRuta["puntosRestantes"] = puntosRestantes;
        infoRuta["segundosRestantes"] = segundosRestantes;
        infoRuta["tiempoEstimado"] = tiempoEstimado;

        ruta.TiempoEstimadoPersonalizado = tiempoEstimado;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        if (actualizacionTimer is not null)
        {
            await actualizacionTimer.DisposeAsync();
        }
    }


    public class Ruta
    {
        public int Id { get; set; }
        public string? Descripcion { get; set; }
        public object? PuntosRuta { get; set; }
        public object? Autobuses { get; set; }

        [JsonIgnore]
        public string? TiempoEstimadoPersonalizado { get; set; }

        [JsonIgnore]
        public int PuntosRutaCount
        {
            get
            {
                if (PuntosRuta == null) return 0;
                if (PuntosRuta is IList list)
                    return list.Count;
                if (PuntosRuta is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Array)
                        return element.GetArrayLength();
                    if (element.TryGetProperty("$values", out var valuesElement) &&
                        valuesElement.ValueKind == JsonValueKind.Array)
                        return valuesElement.GetArrayLength();
                }
                return 0;
            }
        }

        [JsonIgnore]
        public int AutobusesCount
        {
            get
            {
                if (Autobuses == null) return 0;
                if (Autobuses is IList list)
                    return list.Count;
                if (Autobuses is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Array)
                        return element.GetArrayLength();
                    if (element.TryGetProperty("$values", out var valuesElement) &&
                        valuesElement.ValueKind == JsonValueKind.Array)
                        return valuesElement.GetArrayLength();
                }
                return 0;
            }
        }

        [JsonIgnore]
        public string TiempoEstimado
        {
            get
            {
                if (!string.IsNullOrEmpty(TiempoEstimadoPersonalizado))
                {
                    return TiempoEstimadoPersonalizado;
                }

                int totalPuntos = this.PuntosRutaCount;
                if (totalPuntos == 0)
                    return "N/A";

                int mejorPuntoActual = 0;
                bool encontrado = false;

                if (Autobuses != null)
                {
                    if (Autobuses is IList list)
                    {
                        foreach (var item in list)
                        {
                            int? puntoActual = null;

                            if (item is JsonElement je && je.ValueKind == JsonValueKind.Object)
                            {
                                if (je.TryGetProperty("puntoActual", out var pa) && pa.TryGetInt32(out int paValue))
                                    puntoActual = paValue;
                            }

                            if (puntoActual.HasValue && (!encontrado || puntoActual.Value > mejorPuntoActual))
                            {
                                mejorPuntoActual = puntoActual.Value;
                                encontrado = true;
                            }
                        }
                    }
                    else if (Autobuses is JsonElement je && je.ValueKind == JsonValueKind.Array)
                    {
                        foreach (var item in je.EnumerateArray())
                        {
                            if (item.TryGetProperty("puntoActual", out var pa) && pa.TryGetInt32(out int paValue))
                            {
                                if (!encontrado || paValue > mejorPuntoActual)
                                {
                                    mejorPuntoActual = paValue;
                                    encontrado = true;
                                }
                            }
                        }
                    }
                }

                int puntosRestantes = totalPuntos - mejorPuntoActual;
                if (puntosRestantes < 0) puntosRestantes = 0;

                int segundosEstimados = (int)(puntosRestantes * 4.5);
                return FormatTime(segundosEstimados);
            }
        }

        private string FormatTime(int seconds)
        {
            TimeSpan ts = TimeSpan.FromSeconds(seconds);
            if (ts.TotalHours >= 1)
                return $"{(int)ts.TotalHours}h {ts.Minutes}m";
            else if (ts.TotalMinutes >= 1)
                return $"{ts.Minutes}m {ts.Seconds}s";
            else
                return $"{ts.Seconds}s";
        }
    }

    public class PuntoRuta
    {
        public int Id { get; set; }
        public int RutaId { get; set; }
        public int Orden { get; set; }
        public double Latitud { get; set; }
        public double Longitud { get; set; }
    }
}
